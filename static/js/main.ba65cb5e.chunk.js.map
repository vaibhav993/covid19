{"version":3,"sources":["components/Header/index.js","components/Footer/index.js","components/NavBar/index.js","components/Layout/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","memo","children","className","Footer","FA","require","NavBar","tabsData","useState","label","activeLink","setActiveLink","map","path","icon","isActive","key","to","onClick","e","activeTab","find","o","onLinkClicked","name","Layout","Home","lazy","About","App","React","basename","process","fallback","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6WAmBeA,G,MAfAC,gBAAK,YAAmB,IAAhBC,EAAe,EAAfA,SACnB,OACI,4BAAQC,UAAU,qDACd,yBAAKA,UAAU,yCACX,wBAAIA,UAAU,eAAd,qBAKAD,OCCDE,G,MAVAH,gBAAK,WAChB,OACI,gCACI,yBAAKE,UAAU,qBAAf,6BAC2B,uD,QCJjCE,G,MAAKC,EAAQ,KAmCJC,EAjCAN,gBAAK,YAAmB,IAAhBO,EAAe,EAAfA,SAAe,EACIC,mBAASD,EAAS,GAAGE,OADzB,mBAC1BC,EAD0B,KACdC,EADc,KAUlC,OACI,yBAAKT,UAAU,mBACX,wBAAIA,UAAU,8CAENK,EAASK,KAAI,YAA4B,IAAzBH,EAAwB,EAAxBA,MAAOI,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACnBC,EAAWN,IAAUC,EAC3B,OACI,wBAAIR,UAAWa,EAAW,kCAAoC,2BAA4BC,IAAG,cAASP,IAClG,kBAAC,IAAD,CAAMP,UAAU,0BAA0Be,GAAE,WAAMJ,GAAQK,QAAS,SAAAC,GAAC,OAf1E,SAACV,GACnB,IAAMW,EAAYb,EAASc,MAAK,SAAAC,GAAC,OAAIA,EAAEb,QAAUA,KAE9CW,GACCT,EAAcS,EAAUX,OAWoEc,CAAcd,KAE9EK,GAAQ,kBAACV,EAAD,CAAIF,UAAU,gBAAgBsB,KAAMV,IAE/CL,YCrB/BF,G,MAAW,CACb,CACIE,MAAO,OACPI,KAAM,IAEV,CACIJ,MAAO,QACPI,KAAM,WAkBCY,EAdAzB,gBAAK,YAAmB,IAAhBC,EAAe,EAAfA,SACnB,OACI,oCACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAQM,SAAUA,KAEtB,0BAAML,UAAU,4BACXD,GAEL,kBAAC,EAAD,UCrBNyB,G,MAAOC,gBAAK,kBAAM,iCAClBC,EAAQD,gBAAK,kBAAM,gCAiBVE,EAfHC,IAAM9B,MAAK,WACnB,OACI,kBAAC,IAAD,CAAQ+B,SAAUC,YAAlB,IACI,kBAAC,EAAD,KACI,kBAAC,WAAD,CAAUC,SAAU,4CAChB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOpB,KAAK,IAAIqB,UAAWR,EAAMS,OAAK,IACtC,kBAAC,IAAD,CAAOtB,KAAK,SAASqB,UAAWN,WCJpCQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ba65cb5e.chunk.js","sourcesContent":["import React, { memo } from \"react\";\r\n\r\nimport \"./index.scss\";\r\n\r\nconst Header = memo(({ children }) => {\r\n    return (\r\n        <header className=\"d-flex flex-sm-row flex-column px-lg-5 p-3 shadow\">\r\n            <div className=\"d-flex justify-content-center ml-lg-5\">\r\n                <h1 className=\"main-header\">\r\n                    COVID-19 Tracker\r\n                </h1>\r\n            </div>\r\n            {\r\n                children\r\n            }\r\n        </header>\r\n    )\r\n});\r\n\r\nexport default Header;","import React, { memo } from \"react\";\r\n\r\nimport \"./index.scss\";\r\n\r\nconst Footer = memo(() => {\r\n    return (\r\n        <footer>\r\n            <div className=\"copyright-content\">\r\n            \tDeveloped & Maintained by <strong>Vaibhav Botre</strong>\r\n            </div>\r\n        </footer>\r\n    )\r\n});\r\n\r\nexport default Footer;","import React, { memo, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"./index.scss\";\r\nconst FA = require('react-fontawesome');\r\n\r\nconst NavBar = memo(({ tabsData }) => {\r\n    const [ activeLink, setActiveLink ] = useState(tabsData[0].label);\r\n\r\n    const onLinkClicked = (label) => {\r\n        const activeTab = tabsData.find(o => o.label === label);\r\n\r\n        if(activeTab)\r\n            setActiveLink(activeTab.label);\r\n    }\r\n\r\n    return (\r\n        <nav className=\"main-nav navbar\">\r\n            <ul className=\"navbar-nav flex-row justify-content-around\">\r\n                {\r\n                    tabsData.map(({ label, path, icon }) => {\r\n                        const isActive = label === activeLink;\r\n                        return (\r\n                            <li className={isActive ? \"nav-item ml-lg-5 ml-sm-4 active\" : \"nav-item ml-lg-5 ml-sm-4\"} key={`nav_${label}`}>\r\n                                <Link className=\"nav-link text-uppercase\" to={`/${path}`} onClick={e => onLinkClicked(label)}>\r\n                                    {\r\n                                        icon && <FA className=\"nav-icon link\" name={icon}/>\r\n                                    }\r\n                                    {label}\r\n                                </Link>\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        </nav>\r\n    )\r\n});\r\n\r\nexport default NavBar;","import React, { memo } from \"react\";\r\n\r\nimport Header from \"../Header\";\r\nimport Footer from \"../Footer\";\r\nimport NavBar from \"../NavBar\"; \r\nimport \"./index.scss\";\r\n\r\nconst tabsData = [\r\n    {\r\n        label: \"HOME\",\r\n        path: \"\",\r\n    },\r\n    {\r\n        label: \"ABOUT\",\r\n        path: \"about\"\r\n    }\r\n]\r\n\r\nconst Layout = memo(({ children }) => {\r\n    return (\r\n        <>\r\n            <Header>\r\n                <NavBar tabsData={tabsData}/>\r\n            </Header>\r\n            <main className=\"container main-container\">\r\n                {children}\r\n            </main>\r\n            <Footer/>\r\n        </>\r\n    )\r\n});\r\n\r\nexport default Layout;","import React, { Suspense, lazy } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport Layout from \"./components/Layout\";\nimport './App.scss';\n\nconst Home = lazy(() => import('./pages/Home'));\nconst About = lazy(() => import('./pages/About'));\n\nconst App = React.memo(() => {\n    return (\n        <Router basename={process.env.PUBLIC_URL}>>\n            <Layout>\n                <Suspense fallback={<div>Loading...</div>}>\n                    <Switch>\n                        <Route path=\"/\" component={Home} exact/>\n                        <Route path=\"/about\" component={About}/>\n                    </Switch>\n                </Suspense>\n            </Layout> \n        </Router>\n    );\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}